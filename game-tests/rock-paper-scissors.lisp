(defun get-player-choice (options)
  (format t "Please enter one of the following choices -> ~{~A~^, ~}: " options)
  (force-output)
  (or (find (read-line) options :test #'string-equal) (get-player-choice)))

(defun game ()
  (let* ((options '("rock" "paper" "scissors"))
         (cpu-choice (nth (random (length options) (make-random-state t)) options))
         (player-choice (get-player-choice options)))
    (cond
      ((string-equal player-choice cpu-choice)
       (format t "You entered ~A, CPU entered ~A. Draw.~%~%" player-choice cpu-choice))
      ((and (string-equal player-choice "rock") (string-equal cpu-choice "scissors"))
       (format t "You entered ~A, CPU entered ~A. Win.~%~%" player-choice cpu-choice))
      ((and (string-equal player-choice "paper") (string-equal cpu-choice "rock"))
       (format t "You entered ~A, CPU entered ~A. Win.~%~%" player-choice cpu-choice))
      ((and (string-equal player-choice "scissors") (string-equal cpu-choice "paper"))
       (format t "You entered ~A, CPU entered ~A. Win.~%~%" player-choice cpu-choice))
      (t 
       (format t "You entered ~A, CPU entered ~A. Lose.~%~%" player-choice cpu-choice)))
    (game)))
